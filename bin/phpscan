#!/usr/bin/env php

<?php

require __DIR__ . '/../vendor/autoload.php';

$dirName = dirname(__DIR__) . '/example';

$allFiles = [];
function a(&$allFiles, $dir) {
    $ffs = scandir($dir);

    unset($ffs[array_search('.', $ffs, true)]);
    unset($ffs[array_search('..', $ffs, true)]);
    unset($ffs[array_search('.gitignore', $ffs, true)]);

    // prevent empty ordered elements
    if (count($ffs) < 1) {
        return;
    }

    foreach ($ffs as $ff) {
        if (is_dir($dir . '/' . $ff)) {
            a($allFiles, $dir . '/' . $ff);
        } else {
            $allFiles[] = $dir . '/' . $ff;
        }
    }
}

a($allFiles, $dirName);
//var_dump($allFiles);

$results = [];
$imports = [];
$id = 0;
foreach ($allFiles as $file) {
    $open = fopen($file, 'rb');

    if ($open === false) {
        echo 'Cannot open file: ' . $file;
        die;
    }

    while (!feof($open)) {
        $line = fgets($open);

        if (strpos($line, 'namespace') !== false) {
            $results[$id] = new \Ferror\Bundle\PHPScan\ClassImports(trimNamespace($line), []);
        }

        if (strpos($line, 'use') !== false) {
            $results[$id]->addImport(trimUse($line));
        }

        if (strpos($line, 'class') !== false) {
            break;
        }
    }

    $id++;

    fclose($open);
}

function trimNamespace($line)
{
    $line = str_replace(['namespace', ';'], '', $line);

    if ($as = strpos($line, 'as')) {
        $line = substr($line, 0, $as);
    }

    return trim($line);
}

function trimUse($line)
{
    $line = str_replace(['use', ';'], '', $line);
    $line = substr($line, 0, strpos($line, "as"));

    return trim($line);
}

var_dump($results);
